-*- Mode: Outline -*-

* Notes on reference sources
ACL = ANSI Common Lisp
OL = On Lisp
* Easy list building (ACL p. 11)
See below for append.

(list 'my (+ 2 1) "sons")

* Local variables (ACL p. 19)
NOTE: a let clause allows a body of expressions, so no need to use
progn.

(let ((x 1) (y 2)) (+ x y))

* Equality predicate (ACL p. 16).
Tests if objects are the same.

(eql 1 2) ; NIL
(eql 1 1) ; T

* Global variables (ACL p. 20)
(defparameter *glob* 99)

* Lambda (ACL p. 26).  Anonymous function definition.
Returns an anonymous function that adds its two arguments.

(lambda (x y)
  (+ x y))

* Keyword function arguments (ACL p. 103).
(keylist 1 :y 2) returns (1 nil 2 nil)

(defun keylist (a &key x y z)
  (list a x y z))

* iteration with 'do' (ACL p. 23)
Evaluation of 'do' macro: on each iteration, the variables are
updated, the termination condition is evaluated, and the body is
executed if the termination condition is nil.  NOTE: returns 'done as
the result of the do.

(defun show-squares (start end)
  ;; Variable spec: variable 'i' is
  ;; initialized with value 'start' and is
  ;; updated with (+ i 1) at the end of
  ;; each iteration.
  (do ((i start (+ i 1)))
      ;; Termination condition: loop
      ;; terminates when (> i end)
      ;; evaluates to t.
      ((> i end)
       ;; A list of expressions to be
       ;; evaluated at loop termination
       ;; goes here.  The result of the
       ;; last expression ('done in this
       ;; case) is returned as the value of
       ;; the 'do' expression.
       'done)
    ;; Loop body: each expression will be
    ;; evaluated in order.
    (format t "~A ~A~%" i (* i i))))

* progn (ACL p. 24)
execute a list of forms and return the result of the last.

(progn
  (+ 1 2)
  (+ 3 4)) ; returns 7

* Appending to lists (ACL p.36)
Returns (a b c d e)

(append '(a b) '(c d) '(e))

* Easy list access (ACL p. 39)
(nth 0 '(a b c))

* Assignment (ACL p. 21)
(setf *glob* 98)

* List length (ACL p. 45)
Returns 3

(length '(a b c))

* Stack (ACL p. 47)
Equivalent to (setf lst (cons obj lst))

(push obj lst)

* Arrays (ACL p. 58)
Creation

(setf arr (make-array '(2 3))) ; 2x3
(setf vec (make-array 4)) ; vector

Access (aref array index)

(aref arr 0 0)

Element assignment
(setf (aref arr 0 0) 'b)

Length: same as for list (returns 4)

(length vec)

* String element access (ACL pp. 62)
NOTE: aref also works as expected but this is faster.  Returns #\b.

(char "abc" 1)

* String concatenation (ACL pp. 62-63)
Using format with a first argument of nil.  Returns "truth or dare"

(format nil "~A or ~A" "truth" "dare")

Using concatenate.  Returns "not to worry"

(concatenate 'string "not " "to worry")

* Structures (ACL pp. 69-70)
Simple creation
(defstruct point
  x
  y)

Construction/assignment

(setf p (make-point :x 2 :y 3))

Member access.  Returns 2.

(point-x p)

Member assignment

(setf (point-y p) 4)

More complex creation

(defstruct
  (point (:conc-name p)
	 (:print-function print-point))
  (x 1)
  (y 2))

Notes for above: structure "point" now has a concise name "p" which is
used in member access, so function "point-x" becomes "px".  Members
are also initialized to defaults.  Following is a definition of the
"print-point" function, which is used to display a point.

(defun print-point (p stream depth)
  (format stream "#<~A, ~A>" (px p) (py p)))

* Hash tables (ACL pp. 76-77)
Creation (using default test eql).

(setf ht (make-hash-table))

Retrieve value associated with a key.  Note: this returns a 2-tuple
with the first element indicating the value and the second indicating
whether that value was set in the table (i.e. nil is a valid value to
associate with a key, and the second element would return t in this
case).

(gethash 'color ht)

Associate a value with a key.

(setf (gethash 'color ht) 'red)

Build a hash table with a test other than eql (for use with strings
and other objects for which eql is not appropriate).

(setf ht2 (make-hash-table :test #'equal))


* Return early from subroutine (ACL p. 82)
(defun foo ()
  (return-from foo 27))

* Internal reference for "let" (ACL p. 84)
Allow definitions in "let" to refer to values in previous definitions.
Returns 2.

(let* ((x 1)
       (y (+ x 1)))
  y)

* Multi-branch conditional (ACL p. 85)
(defun our-member (obj lst)
  (cond ((atom lst) nil)
	((eql (car lst) obj) lst)
	(t (our-member obj (cdr lst)))))

* Iteration variants (ACL p. 88)
Allow definitions in "do" to refer to values in previous definitions.
Prints "(1 1) (2 2) (3 3)".

(do* ((x 1 (+ x 1))
      (y x x))
    ((> x 3))
  (format t "(~A ~A) " x y))

* Iterate over elements of a list.
Note: third element of argument list of dolist is return value.
Prints "A B C D" and returns DONE.

(dolist (x '(a b c d) 'done)
  (format t "~A " x))

* Iterate a counter over integers from 0 to n-1.
Note: third element to argument list of dotimes is return value.
Prints "0 1 2 3" and returns 3.

(dotimes (x 3 x) (format t "~A " x))

* Values and multiple-value-bind (ACL p. 90)
Used to allow functions to return more than 1 value

Returns (1 2 3).

(multiple-value-bind (x y z) (values 1 2 3)
  (list x y z))

Returns (1 2 nil).

(multiple-value-bind (x y z) (values 1 2)
  (list x y z))


* error (ACL p. 92)
Interrupt execution and transfer control to top level.  NOTE:
arguments to error function are like format.

(progn
  (error "Oops!")
  (format t "After the error."))

* Optional function parameters (ACL p. 102)
Default to nil if not supplied.

(defun philosoph (thing &optional property)
  (list thing 'is property))

Calling (philosoph 'death) returns (DEATH IS NIL).

* Closures (ACL p. 108)
(defun make-adder (n)
  ;; Ex. (setf add3 (make-adder 3))
  ;; (funcall add3 2)
  #'(lambda (x)
      (+ x n)))

* Pathname (ACL p. 120)
NOTE: keyword argument :directory as well.  Keyword argument :name
should not include the path.

(setf path (make-pathname :name "myfile"))

* with-open-file macro (ACL p. 121)
NOTE: No need to previously declare variable "str" (stream).  Note
spelling of keyword :supersede.

(with-open-file (str path :direction :output
		     :if-exists :supersede)
		(format str "Something~%"))

* read macro (ACL p. 122)
Reads a single lisp object from a stream and returns it.  "If you want
input parsed into Lisp objects, use read" sez Paul.

* read-from-string macro (ACL p. 123)
Reads an expression from a string and returns it.  Also returns the
position in the string at which it stopped reading.  Returns A and 2

(read-from-string "a b c")

* Packages (ACL p. 137)
(defpackage "my-application"
  (:use "common-lisp" "my-utilities")
  (:nicknames "app")
  (:export "win" "lose" "draw"))

* incf and decf (ACL p. 148)
NOTE: second argument to incf/decf defaults to 1.

(incf x n) ;; similar to (setf x (+ x n))
(decf x n) ;; similar to (setf x (- x n))

* Eval (ACL p. 160)
(eval '(+ 1 2 3)) ; returns 6

* CLOS
defclass (ACL p. 180).
The class "circle" has slots "radius" and "center".

(defclass circle () ; no superclasses
  ((radius :accessor circle-radius
	   :initarg :radius
	   :initform 1)
   (center :accessor circle-center
	   :initarg :center
	   :initform (cons 0 0))))

Example of creation and access

(setf c (make-instance 'circle :radius 3))
(circle-radius c) ;; returns 3
(circle-center c) ;; returns (0 . 0)

A class inherits the union of the slots of its superclasses.  Example
using the "circle" class defined above.

(defclass graphic () ; no superclasses
  ((color :accessor graphic-color
	  :initarg :color)
   (visible :accessor graphic-visible
	    :initarg :visible
	    :initform t)))

The "screen-circle" class below thus has the following slots: radius,
center, color, and visible.

(defclass screen-circle (circle graphic)
  ())

Methods are families of functions that can perform different actions
depending on the type of their arguments.  Example using the "circle"
class defined above.

(defclass rectangle () ; no superclasses
  ((height :accessor rect-height)
   (width :accessor rect-width)))
(defmethod area ((x          ; instance
		  rectangle  ; instance type
		  ))
  (* (rect-height x) (rect-width x)))
(defmethod area ((x      ; instance
		  circle ; instance type
		  ))
  (* pi (expt (circle-radius x) 2)))

* tree-equal (ACL p. 360)
Returns true when tree1 and tree2 have the same shape and matching
leaves.

(tree-equal tree1 tree2 &key test test-not)

* String case conversion (ACL p. 365)
(string-downcase string &key start end)
(string-upcase string &key start end)

* Labels (OL p. 21)
Local definitions of functions that are capable of referencing
themselves as well as local state.

(defun count-instances (obj lsts)
  (labels ((instances-in
	    (lst)
	    (if (consp lst)
		(+ (if (eq (car lst) obj) 1 0)
		   (instances-in (cdr lst)))
	      0)))
    (mapcar #'instances-in lsts)))

* Dates and times (common lisp cookbook webpage)
Returns number of seconds since epoch.

(get-universal-time)

Returns multiple values: second, minute, hour, day, month, year,
weekday, daylight savings flag, time zone.  Where the daylight savings
flag is nil if daylight savings is in effect, and non-nil otherwise.
time zone is the number of hours to be added to UTC to get the current
time zone.

(decode-universal-time *timeval*)
(get-decoded-time)

Returns seconds since epoch in UTC zone.  Also has optional time zone
argument.  WARNING: this has problems with daylight savings.

(encode-universal-time
 *secs* *mins* *hours* *days* *months*
 *years*)

* Internal times (common lisp cookbook webpage)
Variable containing the number of internal time units per second
(i.e. if this is 1000 then each internal time unit represents one
millisecond).

internal-time-units-per-second

Returns current wall clock time in internal time units.

(get-internal-real-time)

The difference between two run time values only measures CPU time
allocated to the process, while the difference between to real time
values represents actual time including periods when the process was
not running.

* Generate integer from a string (common lisp cookbook webpage).
(parse-integer "42")

* Formatting decimal numbers
Returns "08" i.e. 8 with minimum width 2 padded on the left by '0'
characters.

(format nil "~2,'0D" 8)

* ASDF
(asdf:operate 'asdf:load-op 'package)

e.g. (asdf:operate 'asdf:load-op 'split-sequence)
     (asdf:operate 'asdf:load-op 'cl-plplot)

* cl-ppcre
Returns "aaab" #("a")

(scan-to-strings "([^b])*b" "aaabd")

* Source code locations
/usr/lib/sbcl - installed with sbcl
/usr/share/doc - contains some examples under cl-asdf.
/usr/share/common-lisp/source - bulk of the ubuntu installed code

* Muffle compiler messages
In code:  (declare (sb-ext:muffle-conditions style-warning))

