-*- Mode: Outline -*-

* special variables
** $@
The file name of the target of the rule.

** $?
The names of all the prerequisites that are newer than the target,
with spaces between them.

** $^
The names of all the prerequisites, with spaces between them.

* phony targets
** e.g. clean object files
.PHONY: clean
clean:
	rm *.o
*** required in case a file named 'clean' ever appears in the directory

** e.g. build all targets
all: prog1 prog2 prog3
.PHONY: all

prog1: prog1.c
       gcc -o prog1 prog1.c
*** required in case a file named 'all' ever appears in the directory

** e.g. prerequisites to a rule
.PHONY: cleanall cleanobj cleandiff

cleanall: cleanobj cleandiff
	  rm prog

cleanobj:
	rm *.o

cleandiff
	rm *.diff
* implicit rules
$< the name of the related file that caused the action.
$* the prefix shared by target and dependent files. 
* set environment variables that will be passed to commands
*** e.g. for environment variable 'ENV_VAR'
export ENV_VER:=value
* ways to set make variables
** =
recursively expand variable references in the source string
** :=
simply expand variable references in the source string
** ?=
set the value only if it is not already set
** +=
append the source value to the current value of the target

* Recursive make tricks
** Calling make recursively on a different directory
use the -C option (-C followed by directory name)
*** e.g. calling make in the parent directory
$(MAKE) -C ..
** Passing goals to recursive calls
use the $(MAKECMDGOALS) special variable
*** e.g. passing goals to recursive command in the parent directory
$(MAKE) -C .. $(MAKECMDGOALS)
